#!/bin/bash
#===============================================================================
# Services
#  Ce module se charge de la gestion des services (dnsmasq pour le moment)
#===============================================================================

#-------------------------------------------------------------------------------
# contantes
#-------------------------------------------------------------------------------
servicesVirtMode="docker"   # mode de virtualisation des services

#-------------------------------------------------------------------------------
# create services
#  Cr√©er un hote puis y ajoute les fichiers de configuration
#-------------------------------------------------------------------------------
yaneCreateServices () {
   for serv in ${serviceName[@]}
   do
      logMessage LOG "Creating a dnsmasq service : $serv using $servicesVirtMode"
      createHost_$servicesVirtMode $serv ${serviceType[$serv]}
      hostName[$serv]=$serv
      hostMode[$serv]=$servicesVirtMode
      hostImage[$serv]=${serviceType[$serv]}
      # Load config files 
      src=$(echo "${serviceConfig[$serv]}" | cut -d! -f 1)
      dest=$(echo "${serviceConfig[$serv]}" | cut -d! -f 2)
      yaneHostPopulateFS_$servicesVirtMode $serv $src $dest
   done
}

#-------------------------------------------------------------------------------
# shutdown services
#-------------------------------------------------------------------------------
yaneShutdownServices () {
   for serv in ${serviceName[@]}
   do
      shutdownHost_$servicesVirtMode $serv
   done
}

#-------------------------------------------------------------------------------
# delete services
#-------------------------------------------------------------------------------
yaneDeleteServices () {
   for serv in ${serviceName[@]}
   do
      deleteHost_$servicesVirtMode $serv
   done
   $IP link del yane$SESSION_ID
}

yaneConnectServices () {
   netmask="24"
   ip_addr_service="192.168.1.1"
   ip_addr_gateway="192.168.1.254"
   for serv in ${serviceName[@]}
   do
      $IP link add yane$SESSION_ID type veth peer name yane0
      $IP link set yane0 netns ${SESSION_ID}_$serv
      $IP link set yane$SESSION_ID up
      $IP netns exec ${SESSION_ID}_$serv ip link set yane0 up
      $IP netns exec ${SESSION_ID}_$serv ip addr add ${ip_addr_service}/$netmask dev yane0
      $IP netns exec ${SESSION_ID}_$serv ip route add default via $ip_addr_gateway
      $IP addr add ${ip_addr_gateway}/$netmask dev yane${SESSION_ID}
      iptables -P FORWARD DROP
      iptables -F FORWARD
      iptables -t nat -F
      iptables -t nat -A POSTROUTING -s ${ip_addr_service}/$netmask -o enp0s25 -j MASQUERADE
      iptables -A FORWARD -i enp0s25 -o yane$SESSION_ID -j ACCEPT
      iptables -A FORWARD -o enp0s25 -i yane$SESSION_ID -j ACCEPT
      $IP netns exec ${SESSION_ID}_$serv iptables -P FORWARD DROP 
      $IP netns exec ${SESSION_ID}_$serv iptables -F FORWARD 
      $IP netns exec ${SESSION_ID}_$serv iptables -t nat -F
      $IP netns exec ${SESSION_ID}_$serv iptables -t nat -A POSTROUTING -s 192.168.5.0/$netmask -o yane0 -j MASQUERADE
      $IP netns exec ${SESSION_ID}_$serv iptables -A FORWARD -i yane0 -o v0 -j ACCEPT
      $IP netns exec ${SESSION_ID}_$serv iptables -A FORWARD -o yane0 -i v0 -j ACCEPT
   done
}
